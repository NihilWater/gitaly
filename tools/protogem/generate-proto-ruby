#!/usr/bin/env ruby

require 'erb'
require 'fileutils'

require_relative 'run.rb'

SOURCE_DIR = File.absolute_path(File.join(__dir__, '..', '..'))
RUBY_VERSION_FILE = File.join('gitaly', 'version.rb')

def main
  proto_output_dir = File.absolute_path(File.join(SOURCE_DIR, 'ruby', 'proto', 'gitaly'))

  version = File.read(File.join(SOURCE_DIR, 'VERSION')).strip

  FileUtils.rm(Dir[File.join(proto_output_dir, '**/*_pb.rb')])
  FileUtils.rm(Dir[File.join(proto_output_dir, 'version.rb')])
  FileUtils.mkdir_p(proto_output_dir)

  proto_dir = File.join(SOURCE_DIR, 'proto')
  proto_files = Dir[File.join(proto_dir, '*.proto')].sort

  run!(
    %W[bundle exec grpc_tools_ruby_protoc -I #{proto_dir} --ruby_out=#{proto_output_dir} --grpc_out=#{proto_output_dir}] + proto_files,
    File.join(SOURCE_DIR, 'tools', 'protogem')
  )

  write_version_file(SOURCE_DIR, version)
  write_ruby_requires(SOURCE_DIR)
end

def write_version_file(output_dir, version)
  path = File.join(output_dir, 'ruby', 'proto', RUBY_VERSION_FILE)
  content = <<~EOF
    # This file is generated by #{File.basename($0)}. Do not edit.
    module Gitaly
      VERSION = '#{version}'
    end
  EOF

  open(path, 'w') { |f| f.write(content) }
end

def write_ruby_requires(output_dir)
  requires = Dir.glob(File.join('gitaly', '*_services_pb.rb'), base: File.join(output_dir, 'ruby', 'proto')).sort
  abort "No auto-generated Ruby service files found" if requires.empty?
  requires.unshift(RUBY_VERSION_FILE)

  gem_root = File.join(output_dir, 'ruby', 'proto', 'gitaly.rb')
  gem_root_template = ERB.new <<~EOT
    # This file is generated by #{File.basename($0)}. Do not edit.
    $:.unshift(File.expand_path('../gitaly', __FILE__))
    <% requires.each do |f| %>
    require '<%= f.sub(/\.rb$/, '') %>'
    <% end %>
  EOT

  open(gem_root, 'w') { |f| f.write(gem_root_template.result(binding)) }
end

main
