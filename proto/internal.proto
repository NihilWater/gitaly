syntax = "proto3";

package gitaly;

import "google/protobuf/timestamp.proto";
import "lint.proto";

option go_package = "gitlab.com/gitlab-org/gitaly/v14/proto/go/gitalypb";

// InternalGitaly is a gRPC service meant to be served by a Gitaly node, but
// only reachable by Praefect or other Gitalies
service InternalGitaly {
  // WalkRepos walks the storage and streams back all known git repos on the
  // requested storage
  rpc WalkRepos (WalkReposRequest) returns (stream WalkReposResponse) {
    option (op_type) = {
      op:          ACCESSOR
      scope_level: STORAGE
    };
  }
  // CleanRepos takes a storage and a list of relative paths and moves them
  // to a quarantine directory /storage/root/+gitaly/lost+found
  rpc CleanRepos  (CleanReposRequest) returns (CleanReposResponse) {
    option (op_type) = {
      op:          MUTATOR
      scope_level: STORAGE
    };
  }
}

message WalkReposRequest {
  string storage_name = 1 [(storage)=true];
}

message WalkReposResponse {
  string relative_path = 1;
  // modification_time is the modification time of the repository directory.
  // This can be used as a proxy for when the repository was last
  // modified.
  google.protobuf.Timestamp modification_time = 2;
}


// CleanReposRequest is a request for the CleanRepos rpc
message CleanReposRequest {
  // StorageName is the storage name of the repositories to clean up.
  string storage_name = 1 [(storage)=true];
  // RelativePaths are the relative paths of the repositories to clean up.
  repeated string relative_paths = 2;
}

// CleanReposResponse is an empty response for the CleanRepos rpc.
message CleanReposResponse {
}
